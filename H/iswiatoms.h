
  /* This file, iswiatoms.h, was generated automatically
     by calling "yap -L misc/buildswiatoms"
     and is based on SWIATOMS, copied from the SWI-Prolog distribution
     please do not update */

  SWI_Atoms[i++] = Yap_LookupAtom("abort");
  SWI_Atoms[i++] = Yap_LookupAtom("$aborted");
  SWI_Atoms[i++] = Yap_LookupAtom("abs");
  SWI_Atoms[i++] = Yap_LookupAtom("access");
  SWI_Atoms[i++] = Yap_LookupAtom("acos");
  SWI_Atoms[i++] = Yap_LookupAtom("acyclic_term");
  SWI_Atoms[i++] = Yap_LookupAtom("add_import");
  SWI_Atoms[i++] = Yap_LookupAtom("address");
  SWI_Atoms[i++] = Yap_LookupAtom("agc");
  SWI_Atoms[i++] = Yap_LookupAtom("agc_gained");
  SWI_Atoms[i++] = Yap_LookupAtom("agc_margin");
  SWI_Atoms[i++] = Yap_LookupAtom("agc_time");
  SWI_Atoms[i++] = Yap_LookupAtom("alias");
  SWI_Atoms[i++] = Yap_LookupAtom("allow_variable_name_as_functor");
  SWI_Atoms[i++] = Yap_LookupAtom("alnum");
  SWI_Atoms[i++] = Yap_LookupAtom("alpha");
  SWI_Atoms[i++] = Yap_LookupAtom("alternative");
  SWI_Atoms[i++] = Yap_LookupAtom("/\\");
  SWI_Atoms[i++] = Yap_LookupAtom("_");
  SWI_Atoms[i++] = Yap_LookupAtom("append");
  SWI_Atoms[i++] = Yap_LookupAtom("=:=");
  SWI_Atoms[i++] = Yap_LookupAtom("=\\=");
  SWI_Atoms[i++] = Yap_LookupAtom("argument");
  SWI_Atoms[i++] = Yap_LookupAtom("argumentlimit");
  SWI_Atoms[i++] = Yap_LookupAtom("as");
  SWI_Atoms[i++] = Yap_LookupAtom("ascii");
  SWI_Atoms[i++] = Yap_LookupAtom("asin");
  SWI_Atoms[i++] = Yap_LookupAtom("assert");
  SWI_Atoms[i++] = Yap_LookupAtom("asserta");
  SWI_Atoms[i++] = Yap_LookupAtom("at");
  SWI_Atoms[i++] = Yap_LookupAtom("=@=");
  SWI_Atoms[i++] = Yap_LookupAtom("at_exit");
  SWI_Atoms[i++] = Yap_LookupAtom("@>");
  SWI_Atoms[i++] = Yap_LookupAtom("@>=");
  SWI_Atoms[i++] = Yap_LookupAtom("\\=@=");
  SWI_Atoms[i++] = Yap_LookupAtom("@<");
  SWI_Atoms[i++] = Yap_LookupAtom("@=<");
  SWI_Atoms[i++] = Yap_LookupAtom("atan");
  SWI_Atoms[i++] = Yap_LookupAtom("atom");
  SWI_Atoms[i++] = Yap_LookupAtom("atom_garbage_collection");
  SWI_Atoms[i++] = Yap_LookupAtom("atomic");
  SWI_Atoms[i++] = Yap_LookupAtom("atoms");
  SWI_Atoms[i++] = Yap_LookupAtom("att");
  SWI_Atoms[i++] = Yap_LookupAtom("attributes");
  SWI_Atoms[i++] = Yap_LookupAtom("attvar");
  SWI_Atoms[i++] = Yap_LookupAtom("autoload");
  SWI_Atoms[i++] = Yap_LookupAtom("backquoted_string");
  SWI_Atoms[i++] = Yap_LookupAtom("\\");
  SWI_Atoms[i++] = Yap_LookupAtom("backtrace");
  SWI_Atoms[i++] = Yap_LookupAtom("|");
  SWI_Atoms[i++] = Yap_LookupAtom("begin");
  SWI_Atoms[i++] = Yap_LookupAtom("binary");
  SWI_Atoms[i++] = Yap_LookupAtom("bind");
  SWI_Atoms[i++] = Yap_LookupAtom("\\/");
  SWI_Atoms[i++] = Yap_LookupAtom("bof");
  SWI_Atoms[i++] = Yap_LookupAtom("bom");
  SWI_Atoms[i++] = Yap_LookupAtom("bool");
  SWI_Atoms[i++] = Yap_LookupAtom("boolean");
  SWI_Atoms[i++] = Yap_LookupAtom("brace_term_position");
  SWI_Atoms[i++] = Yap_LookupAtom("break");
  SWI_Atoms[i++] = Yap_LookupAtom("btree");
  SWI_Atoms[i++] = Yap_LookupAtom("buffer");
  SWI_Atoms[i++] = Yap_LookupAtom("buffer_size");
  SWI_Atoms[i++] = Yap_LookupAtom("built_in_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("busy");
  SWI_Atoms[i++] = Yap_LookupAtom("><");
  SWI_Atoms[i++] = Yap_LookupAtom("byte");
  SWI_Atoms[i++] = Yap_LookupAtom("call");
  SWI_Atoms[i++] = Yap_LookupAtom("callable");
  SWI_Atoms[i++] = Yap_LookupAtom("$callpred");
  SWI_Atoms[i++] = Yap_LookupAtom("canceled");
  SWI_Atoms[i++] = Yap_LookupAtom("case_sensitive_file_names");
  SWI_Atoms[i++] = Yap_LookupAtom("catch");
  SWI_Atoms[i++] = Yap_LookupAtom("ceil");
  SWI_Atoms[i++] = Yap_LookupAtom("ceiling");
  SWI_Atoms[i++] = Yap_LookupAtom("char_type");
  SWI_Atoms[i++] = Yap_LookupAtom("character");
  SWI_Atoms[i++] = Yap_LookupAtom("character_code");
  SWI_Atoms[i++] = Yap_LookupAtom("character_escapes");
  SWI_Atoms[i++] = Yap_LookupAtom("chars");
  SWI_Atoms[i++] = Yap_LookupAtom("chdir");
  SWI_Atoms[i++] = Yap_LookupAtom("chmod");
  SWI_Atoms[i++] = Yap_LookupAtom("choice");
  SWI_Atoms[i++] = Yap_LookupAtom("clause");
  SWI_Atoms[i++] = Yap_LookupAtom("clause_reference");
  SWI_Atoms[i++] = Yap_LookupAtom("close");
  SWI_Atoms[i++] = Yap_LookupAtom("close_on_abort");
  SWI_Atoms[i++] = Yap_LookupAtom("close_option");
  SWI_Atoms[i++] = Yap_LookupAtom("cm");
  SWI_Atoms[i++] = Yap_LookupAtom("cntrl");
  SWI_Atoms[i++] = Yap_LookupAtom("co");
  SWI_Atoms[i++] = Yap_LookupAtom("codes");
  SWI_Atoms[i++] = Yap_LookupAtom("collected");
  SWI_Atoms[i++] = Yap_LookupAtom("collections");
  SWI_Atoms[i++] = Yap_LookupAtom(":");
  SWI_Atoms[i++] = Yap_LookupAtom(",");
  SWI_Atoms[i++] = Yap_LookupAtom("comments");
  SWI_Atoms[i++] = Yap_LookupAtom("compound");
  SWI_Atoms[i++] = Yap_LookupAtom("context");
  SWI_Atoms[i++] = Yap_LookupAtom("context_module");
  SWI_Atoms[i++] = Yap_LookupAtom("continue");
  SWI_Atoms[i++] = Yap_LookupAtom("core");
  SWI_Atoms[i++] = Yap_LookupAtom("core_left");
  SWI_Atoms[i++] = Yap_LookupAtom("cos");
  SWI_Atoms[i++] = Yap_LookupAtom("cputime");
  SWI_Atoms[i++] = Yap_LookupAtom("create");
  SWI_Atoms[i++] = Yap_LookupAtom("csym");
  SWI_Atoms[i++] = Yap_LookupAtom("csymf");
  SWI_Atoms[i++] = Yap_LookupAtom("cumulative");
  SWI_Atoms[i++] = Yap_LookupAtom("{}");
  SWI_Atoms[i++] = Yap_LookupAtom("current");
  SWI_Atoms[i++] = Yap_LookupAtom("current_input");
  SWI_Atoms[i++] = Yap_LookupAtom("current_output");
  SWI_Atoms[i++] = Yap_LookupAtom("!");
  SWI_Atoms[i++] = Yap_LookupAtom("cut_call");
  SWI_Atoms[i++] = Yap_LookupAtom("cut_exit");
  SWI_Atoms[i++] = Yap_LookupAtom("cut_parent");
  SWI_Atoms[i++] = Yap_LookupAtom("cut");
  SWI_Atoms[i++] = Yap_LookupAtom("cyclic_term");
  SWI_Atoms[i++] = Yap_LookupAtom("$and");
  SWI_Atoms[i++] = Yap_LookupAtom("date");
  SWI_Atoms[i++] = Yap_LookupAtom("db_reference");
  SWI_Atoms[i++] = Yap_LookupAtom("$c_call_prolog");
  SWI_Atoms[i++] = Yap_LookupAtom("<meta-call>");
  SWI_Atoms[i++] = Yap_LookupAtom("$call_cleanup");
  SWI_Atoms[i++] = Yap_LookupAtom("$catch");
  SWI_Atoms[i++] = Yap_LookupAtom("$cut");
  SWI_Atoms[i++] = Yap_LookupAtom("dde_error");
  SWI_Atoms[i++] = Yap_LookupAtom("dde_handle");
  SWI_Atoms[i++] = Yap_LookupAtom("debug");
  SWI_Atoms[i++] = Yap_LookupAtom("debug_on_error");
  SWI_Atoms[i++] = Yap_LookupAtom("debugger_print_options");
  SWI_Atoms[i++] = Yap_LookupAtom("debugger_show_context");
  SWI_Atoms[i++] = Yap_LookupAtom("debugging");
  SWI_Atoms[i++] = Yap_LookupAtom("dec10");
  SWI_Atoms[i++] = Yap_LookupAtom("default");
  SWI_Atoms[i++] = Yap_LookupAtom("defined");
  SWI_Atoms[i++] = Yap_LookupAtom("delete");
  SWI_Atoms[i++] = Yap_LookupAtom("depth_limit_exceeded");
  SWI_Atoms[i++] = Yap_LookupAtom("destroy");
  SWI_Atoms[i++] = Yap_LookupAtom("detached");
  SWI_Atoms[i++] = Yap_LookupAtom("detect");
  SWI_Atoms[i++] = Yap_LookupAtom("development");
  SWI_Atoms[i++] = Yap_LookupAtom("$exit");
  SWI_Atoms[i++] = Yap_LookupAtom("$foreign_registered");
  SWI_Atoms[i++] = Yap_LookupAtom("$garbage_collect");
  SWI_Atoms[i++] = Yap_LookupAtom("digit");
  SWI_Atoms[i++] = Yap_LookupAtom("directory");
  SWI_Atoms[i++] = Yap_LookupAtom("discontiguous");
  SWI_Atoms[i++] = Yap_LookupAtom("//");
  SWI_Atoms[i++] = Yap_LookupAtom("/");
  SWI_Atoms[i++] = Yap_LookupAtom("$load");
  SWI_Atoms[i++] = Yap_LookupAtom("$message_queue");
  SWI_Atoms[i++] = Yap_LookupAtom("$mutex");
  SWI_Atoms[i++] = Yap_LookupAtom("domain_error");
  SWI_Atoms[i++] = Yap_LookupAtom("dos");
  SWI_Atoms[i++] = Yap_LookupAtom(".");
  SWI_Atoms[i++] = Yap_LookupAtom("dots");
  SWI_Atoms[i++] = Yap_LookupAtom("double_quotes");
  SWI_Atoms[i++] = Yap_LookupAtom("**");
  SWI_Atoms[i++] = Yap_LookupAtom("$profile_node");
  SWI_Atoms[i++] = Yap_LookupAtom("$recover_and_rethrow");
  SWI_Atoms[i++] = Yap_LookupAtom("$stream");
  SWI_Atoms[i++] = Yap_LookupAtom("$thread_init");
  SWI_Atoms[i++] = Yap_LookupAtom("$throw");
  SWI_Atoms[i++] = Yap_LookupAtom("$time");
  SWI_Atoms[i++] = Yap_LookupAtom("$VAR$");
  SWI_Atoms[i++] = Yap_LookupAtom("$wakeup");
  SWI_Atoms[i++] = Yap_LookupAtom("dynamic");
  SWI_Atoms[i++] = Yap_LookupAtom("e");
  SWI_Atoms[i++] = Yap_LookupAtom("encoding");
  SWI_Atoms[i++] = Yap_LookupAtom("end");
  SWI_Atoms[i++] = Yap_LookupAtom("end_of_file");
  SWI_Atoms[i++] = Yap_LookupAtom("end_of_line");
  SWI_Atoms[i++] = Yap_LookupAtom("end_of_stream");
  SWI_Atoms[i++] = Yap_LookupAtom("environment");
  SWI_Atoms[i++] = Yap_LookupAtom("eof");
  SWI_Atoms[i++] = Yap_LookupAtom("eof_action");
  SWI_Atoms[i++] = Yap_LookupAtom("eof_code");
  SWI_Atoms[i++] = Yap_LookupAtom("epsilon");
  SWI_Atoms[i++] = Yap_LookupAtom("equal");
  SWI_Atoms[i++] = Yap_LookupAtom("=");
  SWI_Atoms[i++] = Yap_LookupAtom("erase");
  SWI_Atoms[i++] = Yap_LookupAtom("erased");
  SWI_Atoms[i++] = Yap_LookupAtom("error");
  SWI_Atoms[i++] = Yap_LookupAtom("eval");
  SWI_Atoms[i++] = Yap_LookupAtom("evaluable");
  SWI_Atoms[i++] = Yap_LookupAtom("evaluation_error");
  SWI_Atoms[i++] = Yap_LookupAtom("exception");
  SWI_Atoms[i++] = Yap_LookupAtom("exclusive");
  SWI_Atoms[i++] = Yap_LookupAtom("execute");
  SWI_Atoms[i++] = Yap_LookupAtom("exist");
  SWI_Atoms[i++] = Yap_LookupAtom("existence_error");
  SWI_Atoms[i++] = Yap_LookupAtom("exit");
  SWI_Atoms[i++] = Yap_LookupAtom("exited");
  SWI_Atoms[i++] = Yap_LookupAtom("exp");
  SWI_Atoms[i++] = Yap_LookupAtom("export");
  SWI_Atoms[i++] = Yap_LookupAtom("exported");
  SWI_Atoms[i++] = Yap_LookupAtom("exports");
  SWI_Atoms[i++] = Yap_LookupAtom("expression");
  SWI_Atoms[i++] = Yap_LookupAtom("external_exception");
  SWI_Atoms[i++] = Yap_LookupAtom("externals");
  SWI_Atoms[i++] = Yap_LookupAtom("fact");
  SWI_Atoms[i++] = Yap_LookupAtom("factor");
  SWI_Atoms[i++] = Yap_LookupAtom("fail");
  SWI_Atoms[i++] = Yap_LookupAtom("failure_error");
  SWI_Atoms[i++] = Yap_LookupAtom("false");
  SWI_Atoms[i++] = Yap_LookupAtom("feature");
  SWI_Atoms[i++] = Yap_LookupAtom("file");
  SWI_Atoms[i++] = Yap_LookupAtom("file_name");
  SWI_Atoms[i++] = Yap_LookupAtom("file_name_variables");
  SWI_Atoms[i++] = Yap_LookupAtom("file_no");
  SWI_Atoms[i++] = Yap_LookupAtom("flag");
  SWI_Atoms[i++] = Yap_LookupAtom("flag_value");
  SWI_Atoms[i++] = Yap_LookupAtom("float");
  SWI_Atoms[i++] = Yap_LookupAtom("float_format");
  SWI_Atoms[i++] = Yap_LookupAtom("float_fractional_part");
  SWI_Atoms[i++] = Yap_LookupAtom("float_integer_part");
  SWI_Atoms[i++] = Yap_LookupAtom("float_overflow");
  SWI_Atoms[i++] = Yap_LookupAtom("float_underflow");
  SWI_Atoms[i++] = Yap_LookupAtom("floor");
  SWI_Atoms[i++] = Yap_LookupAtom("force");
  SWI_Atoms[i++] = Yap_LookupAtom("foreign");
  SWI_Atoms[i++] = Yap_LookupAtom("$foreign_function");
  SWI_Atoms[i++] = Yap_LookupAtom("foreign_return_value");
  SWI_Atoms[i++] = Yap_LookupAtom("fork");
  SWI_Atoms[i++] = Yap_LookupAtom("frame");
  SWI_Atoms[i++] = Yap_LookupAtom("frame_attribute");
  SWI_Atoms[i++] = Yap_LookupAtom("frame_finished");
  SWI_Atoms[i++] = Yap_LookupAtom("frame_reference");
  SWI_Atoms[i++] = Yap_LookupAtom("free_of_attvar");
  SWI_Atoms[i++] = Yap_LookupAtom("freeze");
  SWI_Atoms[i++] = Yap_LookupAtom("full");
  SWI_Atoms[i++] = Yap_LookupAtom("functor_name");
  SWI_Atoms[i++] = Yap_LookupAtom("functors");
  SWI_Atoms[i++] = Yap_LookupAtom("fx");
  SWI_Atoms[i++] = Yap_LookupAtom("fy");
  SWI_Atoms[i++] = Yap_LookupAtom("<garbage_collected>");
  SWI_Atoms[i++] = Yap_LookupAtom("garbage_collection");
  SWI_Atoms[i++] = Yap_LookupAtom("gc");
  SWI_Atoms[i++] = Yap_LookupAtom("gcd");
  SWI_Atoms[i++] = Yap_LookupAtom("gctime");
  SWI_Atoms[i++] = Yap_LookupAtom("getcwd");
  SWI_Atoms[i++] = Yap_LookupAtom("global");
  SWI_Atoms[i++] = Yap_LookupAtom("global_shifts");
  SWI_Atoms[i++] = Yap_LookupAtom("global_stack");
  SWI_Atoms[i++] = Yap_LookupAtom("globallimit");
  SWI_Atoms[i++] = Yap_LookupAtom("globalused");
  SWI_Atoms[i++] = Yap_LookupAtom("goal");
  SWI_Atoms[i++] = Yap_LookupAtom("goal_expansion");
  SWI_Atoms[i++] = Yap_LookupAtom("-->");
  SWI_Atoms[i++] = Yap_LookupAtom("graph");
  SWI_Atoms[i++] = Yap_LookupAtom("ground");
  SWI_Atoms[i++] = Yap_LookupAtom("gvar");
  SWI_Atoms[i++] = Yap_LookupAtom("halt");
  SWI_Atoms[i++] = Yap_LookupAtom("has_alternatives");
  SWI_Atoms[i++] = Yap_LookupAtom("hash");
  SWI_Atoms[i++] = Yap_LookupAtom("hashed");
  SWI_Atoms[i++] = Yap_LookupAtom("^");
  SWI_Atoms[i++] = Yap_LookupAtom("heap");
  SWI_Atoms[i++] = Yap_LookupAtom("heaplimit");
  SWI_Atoms[i++] = Yap_LookupAtom("heapused");
  SWI_Atoms[i++] = Yap_LookupAtom("help");
  SWI_Atoms[i++] = Yap_LookupAtom("hidden");
  SWI_Atoms[i++] = Yap_LookupAtom("hide_childs");
  SWI_Atoms[i++] = Yap_LookupAtom("history_depth");
  SWI_Atoms[i++] = Yap_LookupAtom("->");
  SWI_Atoms[i++] = Yap_LookupAtom("ignore");
  SWI_Atoms[i++] = Yap_LookupAtom("ignore_ops");
  SWI_Atoms[i++] = Yap_LookupAtom("imported");
  SWI_Atoms[i++] = Yap_LookupAtom("imported_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("index");
  SWI_Atoms[i++] = Yap_LookupAtom("indexed");
  SWI_Atoms[i++] = Yap_LookupAtom("inf");
  SWI_Atoms[i++] = Yap_LookupAtom("inferences");
  SWI_Atoms[i++] = Yap_LookupAtom("infinite");
  SWI_Atoms[i++] = Yap_LookupAtom("informational");
  SWI_Atoms[i++] = Yap_LookupAtom("init_file");
  SWI_Atoms[i++] = Yap_LookupAtom("initialization");
  SWI_Atoms[i++] = Yap_LookupAtom("input");
  SWI_Atoms[i++] = Yap_LookupAtom("inserted_char");
  SWI_Atoms[i++] = Yap_LookupAtom("instantiation_error");
  SWI_Atoms[i++] = Yap_LookupAtom("int");
  SWI_Atoms[i++] = Yap_LookupAtom("int64_t");
  SWI_Atoms[i++] = Yap_LookupAtom("int_overflow");
  SWI_Atoms[i++] = Yap_LookupAtom("integer");
  SWI_Atoms[i++] = Yap_LookupAtom("integer_expression");
  SWI_Atoms[i++] = Yap_LookupAtom("interrupt");
  SWI_Atoms[i++] = Yap_LookupAtom("io_error");
  SWI_Atoms[i++] = Yap_LookupAtom("io_mode");
  SWI_Atoms[i++] = Yap_LookupAtom("ioctl");
  SWI_Atoms[i++] = Yap_LookupAtom("is");
  SWI_Atoms[i++] = Yap_LookupAtom("iso");
  SWI_Atoms[i++] = Yap_LookupAtom("iso_latin_1");
  SWI_Atoms[i++] = Yap_LookupAtom("$VAR");
  SWI_Atoms[i++] = Yap_LookupAtom("join");
  SWI_Atoms[i++] = Yap_LookupAtom("jump");
  SWI_Atoms[i++] = Yap_LookupAtom("kernel");
  SWI_Atoms[i++] = Yap_LookupAtom("key");
  SWI_Atoms[i++] = Yap_LookupAtom(">");
  SWI_Atoms[i++] = Yap_LookupAtom(">=");
  SWI_Atoms[i++] = Yap_LookupAtom("level");
  SWI_Atoms[i++] = Yap_LookupAtom("li");
  SWI_Atoms[i++] = Yap_LookupAtom("limit");
  SWI_Atoms[i++] = Yap_LookupAtom("line");
  SWI_Atoms[i++] = Yap_LookupAtom("line_count");
  SWI_Atoms[i++] = Yap_LookupAtom("list");
  SWI_Atoms[i++] = Yap_LookupAtom("list_position");
  SWI_Atoms[i++] = Yap_LookupAtom("listing");
  SWI_Atoms[i++] = Yap_LookupAtom("local");
  SWI_Atoms[i++] = Yap_LookupAtom("local_shifts");
  SWI_Atoms[i++] = Yap_LookupAtom("local_stack");
  SWI_Atoms[i++] = Yap_LookupAtom("locale");
  SWI_Atoms[i++] = Yap_LookupAtom("locallimit");
  SWI_Atoms[i++] = Yap_LookupAtom("localused");
  SWI_Atoms[i++] = Yap_LookupAtom("lock");
  SWI_Atoms[i++] = Yap_LookupAtom("locked");
  SWI_Atoms[i++] = Yap_LookupAtom("log");
  SWI_Atoms[i++] = Yap_LookupAtom("log10");
  SWI_Atoms[i++] = Yap_LookupAtom("long");
  SWI_Atoms[i++] = Yap_LookupAtom("low");
  SWI_Atoms[i++] = Yap_LookupAtom("lower");
  SWI_Atoms[i++] = Yap_LookupAtom("lsb");
  SWI_Atoms[i++] = Yap_LookupAtom("<<");
  SWI_Atoms[i++] = Yap_LookupAtom("main");
  SWI_Atoms[i++] = Yap_LookupAtom("mark");
  SWI_Atoms[i++] = Yap_LookupAtom("matches");
  SWI_Atoms[i++] = Yap_LookupAtom("max");
  SWI_Atoms[i++] = Yap_LookupAtom("max_arity");
  SWI_Atoms[i++] = Yap_LookupAtom("max_dde_handles");
  SWI_Atoms[i++] = Yap_LookupAtom("max_depth");
  SWI_Atoms[i++] = Yap_LookupAtom("max_files");
  SWI_Atoms[i++] = Yap_LookupAtom("max_frame_size");
  SWI_Atoms[i++] = Yap_LookupAtom("max_path_length");
  SWI_Atoms[i++] = Yap_LookupAtom("max_size");
  SWI_Atoms[i++] = Yap_LookupAtom("max_variable_length");
  SWI_Atoms[i++] = Yap_LookupAtom("memory");
  SWI_Atoms[i++] = Yap_LookupAtom("message");
  SWI_Atoms[i++] = Yap_LookupAtom("message_lines");
  SWI_Atoms[i++] = Yap_LookupAtom("message_queue");
  SWI_Atoms[i++] = Yap_LookupAtom("message_queue_property");
  SWI_Atoms[i++] = Yap_LookupAtom("meta_argument");
  SWI_Atoms[i++] = Yap_LookupAtom("meta_argument_specifier");
  SWI_Atoms[i++] = Yap_LookupAtom("meta_predicate");
  SWI_Atoms[i++] = Yap_LookupAtom("min");
  SWI_Atoms[i++] = Yap_LookupAtom("min_free");
  SWI_Atoms[i++] = Yap_LookupAtom("-");
  SWI_Atoms[i++] = Yap_LookupAtom("mismatched_char");
  SWI_Atoms[i++] = Yap_LookupAtom("mod");
  SWI_Atoms[i++] = Yap_LookupAtom("mode");
  SWI_Atoms[i++] = Yap_LookupAtom("modify");
  SWI_Atoms[i++] = Yap_LookupAtom("module");
  SWI_Atoms[i++] = Yap_LookupAtom("module_property");
  SWI_Atoms[i++] = Yap_LookupAtom("module_transparent");
  SWI_Atoms[i++] = Yap_LookupAtom("modules");
  SWI_Atoms[i++] = Yap_LookupAtom("msb");
  SWI_Atoms[i++] = Yap_LookupAtom("multifile");
  SWI_Atoms[i++] = Yap_LookupAtom("mutex");
  SWI_Atoms[i++] = Yap_LookupAtom("mutex_option");
  SWI_Atoms[i++] = Yap_LookupAtom("mutex_property");
  SWI_Atoms[i++] = Yap_LookupAtom("natural");
  SWI_Atoms[i++] = Yap_LookupAtom("newline");
  SWI_Atoms[i++] = Yap_LookupAtom("next_argument");
  SWI_Atoms[i++] = Yap_LookupAtom("[]");
  SWI_Atoms[i++] = Yap_LookupAtom("nlink");
  SWI_Atoms[i++] = Yap_LookupAtom("no_memory");
  SWI_Atoms[i++] = Yap_LookupAtom("nodebug");
  SWI_Atoms[i++] = Yap_LookupAtom("non_empty_list");
  SWI_Atoms[i++] = Yap_LookupAtom("none");
  SWI_Atoms[i++] = Yap_LookupAtom("nonvar");
  SWI_Atoms[i++] = Yap_LookupAtom("noprofile");
  SWI_Atoms[i++] = Yap_LookupAtom("normal");
  SWI_Atoms[i++] = Yap_LookupAtom("not");
  SWI_Atoms[i++] = Yap_LookupAtom("\\=");
  SWI_Atoms[i++] = Yap_LookupAtom("not_implemented");
  SWI_Atoms[i++] = Yap_LookupAtom("not_less_than_one");
  SWI_Atoms[i++] = Yap_LookupAtom("not_less_than_zero");
  SWI_Atoms[i++] = Yap_LookupAtom("\\+");
  SWI_Atoms[i++] = Yap_LookupAtom("\\==");
  SWI_Atoms[i++] = Yap_LookupAtom("not_unique");
  SWI_Atoms[i++] = Yap_LookupAtom("number");
  SWI_Atoms[i++] = Yap_LookupAtom("number_of_clauses");
  SWI_Atoms[i++] = Yap_LookupAtom("numbervar_option");
  SWI_Atoms[i++] = Yap_LookupAtom("numbervars");
  SWI_Atoms[i++] = Yap_LookupAtom("occurs_check");
  SWI_Atoms[i++] = Yap_LookupAtom("octet");
  SWI_Atoms[i++] = Yap_LookupAtom("off");
  SWI_Atoms[i++] = Yap_LookupAtom("on");
  SWI_Atoms[i++] = Yap_LookupAtom("open");
  SWI_Atoms[i++] = Yap_LookupAtom("operator");
  SWI_Atoms[i++] = Yap_LookupAtom("operator_priority");
  SWI_Atoms[i++] = Yap_LookupAtom("operator_specifier");
  SWI_Atoms[i++] = Yap_LookupAtom("optimise");
  SWI_Atoms[i++] = Yap_LookupAtom("or");
  SWI_Atoms[i++] = Yap_LookupAtom("order");
  SWI_Atoms[i++] = Yap_LookupAtom("output");
  SWI_Atoms[i++] = Yap_LookupAtom("pair");
  SWI_Atoms[i++] = Yap_LookupAtom("paren");
  SWI_Atoms[i++] = Yap_LookupAtom("parent");
  SWI_Atoms[i++] = Yap_LookupAtom("parent_goal");
  SWI_Atoms[i++] = Yap_LookupAtom("partial");
  SWI_Atoms[i++] = Yap_LookupAtom("past");
  SWI_Atoms[i++] = Yap_LookupAtom("past_end_of_stream");
  SWI_Atoms[i++] = Yap_LookupAtom("pattern");
  SWI_Atoms[i++] = Yap_LookupAtom("pc");
  SWI_Atoms[i++] = Yap_LookupAtom("period");
  SWI_Atoms[i++] = Yap_LookupAtom("permission_error");
  SWI_Atoms[i++] = Yap_LookupAtom("pi");
  SWI_Atoms[i++] = Yap_LookupAtom("pipe");
  SWI_Atoms[i++] = Yap_LookupAtom("plain");
  SWI_Atoms[i++] = Yap_LookupAtom("+");
  SWI_Atoms[i++] = Yap_LookupAtom("popcount");
  SWI_Atoms[i++] = Yap_LookupAtom("portray");
  SWI_Atoms[i++] = Yap_LookupAtom("position");
  SWI_Atoms[i++] = Yap_LookupAtom("posix");
  SWI_Atoms[i++] = Yap_LookupAtom("powm");
  SWI_Atoms[i++] = Yap_LookupAtom("predicate_indicator");
  SWI_Atoms[i++] = Yap_LookupAtom("predicates");
  SWI_Atoms[i++] = Yap_LookupAtom("print");
  SWI_Atoms[i++] = Yap_LookupAtom("print_message");
  SWI_Atoms[i++] = Yap_LookupAtom("priority");
  SWI_Atoms[i++] = Yap_LookupAtom("private_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("profile_mode");
  SWI_Atoms[i++] = Yap_LookupAtom("profile_no_cpu_time");
  SWI_Atoms[i++] = Yap_LookupAtom("profile_node");
  SWI_Atoms[i++] = Yap_LookupAtom("program");
  SWI_Atoms[i++] = Yap_LookupAtom("program_counter");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog_flag");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog_flag_access");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog_flag_option");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog_flag_type");
  SWI_Atoms[i++] = Yap_LookupAtom("|:");
  SWI_Atoms[i++] = Yap_LookupAtom("property");
  SWI_Atoms[i++] = Yap_LookupAtom("protocol");
  SWI_Atoms[i++] = Yap_LookupAtom(":-");
  SWI_Atoms[i++] = Yap_LookupAtom("punct");
  SWI_Atoms[i++] = Yap_LookupAtom("?-");
  SWI_Atoms[i++] = Yap_LookupAtom("?");
  SWI_Atoms[i++] = Yap_LookupAtom("queue_option");
  SWI_Atoms[i++] = Yap_LookupAtom("quiet");
  SWI_Atoms[i++] = Yap_LookupAtom("quote");
  SWI_Atoms[i++] = Yap_LookupAtom("quoted");
  SWI_Atoms[i++] = Yap_LookupAtom("radix");
  SWI_Atoms[i++] = Yap_LookupAtom("random");
  SWI_Atoms[i++] = Yap_LookupAtom("random_option");
  SWI_Atoms[i++] = Yap_LookupAtom("rational");
  SWI_Atoms[i++] = Yap_LookupAtom("rationalize");
  SWI_Atoms[i++] = Yap_LookupAtom("rdiv");
  SWI_Atoms[i++] = Yap_LookupAtom("read");
  SWI_Atoms[i++] = Yap_LookupAtom("read_only");
  SWI_Atoms[i++] = Yap_LookupAtom("read_option");
  SWI_Atoms[i++] = Yap_LookupAtom("read_write");
  SWI_Atoms[i++] = Yap_LookupAtom("readline");
  SWI_Atoms[i++] = Yap_LookupAtom("real_time");
  SWI_Atoms[i++] = Yap_LookupAtom("receiver");
  SWI_Atoms[i++] = Yap_LookupAtom("record");
  SWI_Atoms[i++] = Yap_LookupAtom("record_position");
  SWI_Atoms[i++] = Yap_LookupAtom("redefine");
  SWI_Atoms[i++] = Yap_LookupAtom("redo");
  SWI_Atoms[i++] = Yap_LookupAtom("references");
  SWI_Atoms[i++] = Yap_LookupAtom("rem");
  SWI_Atoms[i++] = Yap_LookupAtom("rename");
  SWI_Atoms[i++] = Yap_LookupAtom("report_error");
  SWI_Atoms[i++] = Yap_LookupAtom("reposition");
  SWI_Atoms[i++] = Yap_LookupAtom("representation_error");
  SWI_Atoms[i++] = Yap_LookupAtom("representation_errors");
  SWI_Atoms[i++] = Yap_LookupAtom("reset");
  SWI_Atoms[i++] = Yap_LookupAtom("resource_error");
  SWI_Atoms[i++] = Yap_LookupAtom("resource_handle");
  SWI_Atoms[i++] = Yap_LookupAtom("retry");
  SWI_Atoms[i++] = Yap_LookupAtom("round");
  SWI_Atoms[i++] = Yap_LookupAtom(">>");
  SWI_Atoms[i++] = Yap_LookupAtom("running");
  SWI_Atoms[i++] = Yap_LookupAtom("runtime");
  SWI_Atoms[i++] = Yap_LookupAtom("save_class");
  SWI_Atoms[i++] = Yap_LookupAtom("save_option");
  SWI_Atoms[i++] = Yap_LookupAtom("seed");
  SWI_Atoms[i++] = Yap_LookupAtom("seek_method");
  SWI_Atoms[i++] = Yap_LookupAtom("select");
  SWI_Atoms[i++] = Yap_LookupAtom(";");
  SWI_Atoms[i++] = Yap_LookupAtom("separated");
  SWI_Atoms[i++] = Yap_LookupAtom("set");
  SWI_Atoms[i++] = Yap_LookupAtom("setup_call_catcher_cleanup");
  SWI_Atoms[i++] = Yap_LookupAtom("shared");
  SWI_Atoms[i++] = Yap_LookupAtom("shared_object");
  SWI_Atoms[i++] = Yap_LookupAtom("shared_object_handle");
  SWI_Atoms[i++] = Yap_LookupAtom("shell");
  SWI_Atoms[i++] = Yap_LookupAtom("sign");
  SWI_Atoms[i++] = Yap_LookupAtom("signal");
  SWI_Atoms[i++] = Yap_LookupAtom("signal_handler");
  SWI_Atoms[i++] = Yap_LookupAtom("silent");
  SWI_Atoms[i++] = Yap_LookupAtom("sin");
  SWI_Atoms[i++] = Yap_LookupAtom("singletons");
  SWI_Atoms[i++] = Yap_LookupAtom("size");
  SWI_Atoms[i++] = Yap_LookupAtom("size_t");
  SWI_Atoms[i++] = Yap_LookupAtom("skip");
  SWI_Atoms[i++] = Yap_LookupAtom("<");
  SWI_Atoms[i++] = Yap_LookupAtom("=<");
  SWI_Atoms[i++] = Yap_LookupAtom("*->");
  SWI_Atoms[i++] = Yap_LookupAtom("source_sink");
  SWI_Atoms[i++] = Yap_LookupAtom("space");
  SWI_Atoms[i++] = Yap_LookupAtom("spacing");
  SWI_Atoms[i++] = Yap_LookupAtom("spare");
  SWI_Atoms[i++] = Yap_LookupAtom("spy");
  SWI_Atoms[i++] = Yap_LookupAtom("sqrt");
  SWI_Atoms[i++] = Yap_LookupAtom("stack");
  SWI_Atoms[i++] = Yap_LookupAtom("stack_parameter");
  SWI_Atoms[i++] = Yap_LookupAtom("stack_shifts");
  SWI_Atoms[i++] = Yap_LookupAtom("stacks");
  SWI_Atoms[i++] = Yap_LookupAtom("stand_alone");
  SWI_Atoms[i++] = Yap_LookupAtom("standard");
  SWI_Atoms[i++] = Yap_LookupAtom("*");
  SWI_Atoms[i++] = Yap_LookupAtom("start");
  SWI_Atoms[i++] = Yap_LookupAtom("stat");
  SWI_Atoms[i++] = Yap_LookupAtom("static_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("statistics");
  SWI_Atoms[i++] = Yap_LookupAtom("status");
  SWI_Atoms[i++] = Yap_LookupAtom("stderr");
  SWI_Atoms[i++] = Yap_LookupAtom("stream");
  SWI_Atoms[i++] = Yap_LookupAtom("stream_option");
  SWI_Atoms[i++] = Yap_LookupAtom("stream_or_alias");
  SWI_Atoms[i++] = Yap_LookupAtom("stream_pair");
  SWI_Atoms[i++] = Yap_LookupAtom("$stream_position");
  SWI_Atoms[i++] = Yap_LookupAtom("stream_property");
  SWI_Atoms[i++] = Yap_LookupAtom("==");
  SWI_Atoms[i++] = Yap_LookupAtom("string");
  SWI_Atoms[i++] = Yap_LookupAtom("string_position");
  SWI_Atoms[i++] = Yap_LookupAtom("subterm_positions");
  SWI_Atoms[i++] = Yap_LookupAtom("suffix");
  SWI_Atoms[i++] = Yap_LookupAtom("syntax_error");
  SWI_Atoms[i++] = Yap_LookupAtom("syntax_errors");
  SWI_Atoms[i++] = Yap_LookupAtom("system");
  SWI_Atoms[i++] = Yap_LookupAtom("system_error");
  SWI_Atoms[i++] = Yap_LookupAtom("system_init_file");
  SWI_Atoms[i++] = Yap_LookupAtom("system_thread_id");
  SWI_Atoms[i++] = Yap_LookupAtom("system_time");
  SWI_Atoms[i++] = Yap_LookupAtom("tan");
  SWI_Atoms[i++] = Yap_LookupAtom("temporary_files");
  SWI_Atoms[i++] = Yap_LookupAtom("term");
  SWI_Atoms[i++] = Yap_LookupAtom("term_expansion");
  SWI_Atoms[i++] = Yap_LookupAtom("term_position");
  SWI_Atoms[i++] = Yap_LookupAtom("terminal");
  SWI_Atoms[i++] = Yap_LookupAtom("terminal_capability");
  SWI_Atoms[i++] = Yap_LookupAtom("text");
  SWI_Atoms[i++] = Yap_LookupAtom("thread");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_cputime");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_initialization");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_local");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_local_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_option");
  SWI_Atoms[i++] = Yap_LookupAtom("thread_property");
  SWI_Atoms[i++] = Yap_LookupAtom("threads");
  SWI_Atoms[i++] = Yap_LookupAtom("threads_created");
  SWI_Atoms[i++] = Yap_LookupAtom("throw");
  SWI_Atoms[i++] = Yap_LookupAtom("~");
  SWI_Atoms[i++] = Yap_LookupAtom("time");
  SWI_Atoms[i++] = Yap_LookupAtom("time_stamp");
  SWI_Atoms[i++] = Yap_LookupAtom("timeout");
  SWI_Atoms[i++] = Yap_LookupAtom("timeout_error");
  SWI_Atoms[i++] = Yap_LookupAtom("timezone");
  SWI_Atoms[i++] = Yap_LookupAtom("to_lower");
  SWI_Atoms[i++] = Yap_LookupAtom("to_upper");
  SWI_Atoms[i++] = Yap_LookupAtom("top");
  SWI_Atoms[i++] = Yap_LookupAtom("top_level");
  SWI_Atoms[i++] = Yap_LookupAtom("toplevel");
  SWI_Atoms[i++] = Yap_LookupAtom("trace");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_any");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_call");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_exit");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_fail");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_gc");
  SWI_Atoms[i++] = Yap_LookupAtom("trace_redo");
  SWI_Atoms[i++] = Yap_LookupAtom("prolog_trace_interception");
  SWI_Atoms[i++] = Yap_LookupAtom("tracing");
  SWI_Atoms[i++] = Yap_LookupAtom("trail");
  SWI_Atoms[i++] = Yap_LookupAtom("trail_shifts");
  SWI_Atoms[i++] = Yap_LookupAtom("traillimit");
  SWI_Atoms[i++] = Yap_LookupAtom("trailused");
  SWI_Atoms[i++] = Yap_LookupAtom("transparent");
  SWI_Atoms[i++] = Yap_LookupAtom("transposed_char");
  SWI_Atoms[i++] = Yap_LookupAtom("transposed_word");
  SWI_Atoms[i++] = Yap_LookupAtom("true");
  SWI_Atoms[i++] = Yap_LookupAtom("truncate");
  SWI_Atoms[i++] = Yap_LookupAtom("tty");
  SWI_Atoms[i++] = Yap_LookupAtom("tty_control");
  SWI_Atoms[i++] = Yap_LookupAtom("type");
  SWI_Atoms[i++] = Yap_LookupAtom("type_error");
  SWI_Atoms[i++] = Yap_LookupAtom("undefined");
  SWI_Atoms[i++] = Yap_LookupAtom("undefined_global_variable");
  SWI_Atoms[i++] = Yap_LookupAtom("$undefined_procedure");
  SWI_Atoms[i++] = Yap_LookupAtom("unicode_be");
  SWI_Atoms[i++] = Yap_LookupAtom("unicode_le");
  SWI_Atoms[i++] = Yap_LookupAtom("unify");
  SWI_Atoms[i++] = Yap_LookupAtom("?=");
  SWI_Atoms[i++] = Yap_LookupAtom("unique");
  SWI_Atoms[i++] = Yap_LookupAtom("=..");
  SWI_Atoms[i++] = Yap_LookupAtom("unknown");
  SWI_Atoms[i++] = Yap_LookupAtom("unlimited");
  SWI_Atoms[i++] = Yap_LookupAtom("unload");
  SWI_Atoms[i++] = Yap_LookupAtom("unlock");
  SWI_Atoms[i++] = Yap_LookupAtom("unlocked");
  SWI_Atoms[i++] = Yap_LookupAtom("update");
  SWI_Atoms[i++] = Yap_LookupAtom("upper");
  SWI_Atoms[i++] = Yap_LookupAtom("user");
  SWI_Atoms[i++] = Yap_LookupAtom("user_error");
  SWI_Atoms[i++] = Yap_LookupAtom("user_flags");
  SWI_Atoms[i++] = Yap_LookupAtom("user_input");
  SWI_Atoms[i++] = Yap_LookupAtom("user_output");
  SWI_Atoms[i++] = Yap_LookupAtom("UTC");
  SWI_Atoms[i++] = Yap_LookupAtom("utf8");
  SWI_Atoms[i++] = Yap_LookupAtom("v");
  SWI_Atoms[i++] = Yap_LookupAtom("var");
  SWI_Atoms[i++] = Yap_LookupAtom("variable");
  SWI_Atoms[i++] = Yap_LookupAtom("variable_names");
  SWI_Atoms[i++] = Yap_LookupAtom("variables");
  SWI_Atoms[i++] = Yap_LookupAtom("very_deep");
  SWI_Atoms[i++] = Yap_LookupAtom("vmi");
  SWI_Atoms[i++] = Yap_LookupAtom("volatile");
  SWI_Atoms[i++] = Yap_LookupAtom("wakeup");
  SWI_Atoms[i++] = Yap_LookupAtom("walltime");
  SWI_Atoms[i++] = Yap_LookupAtom("warning");
  SWI_Atoms[i++] = Yap_LookupAtom("wchar_t");
  SWI_Atoms[i++] = Yap_LookupAtom("when_condition");
  SWI_Atoms[i++] = Yap_LookupAtom("white");
  SWI_Atoms[i++] = Yap_LookupAtom("write");
  SWI_Atoms[i++] = Yap_LookupAtom("write_attributes");
  SWI_Atoms[i++] = Yap_LookupAtom("write_option");
  SWI_Atoms[i++] = Yap_LookupAtom("xdigit");
  SWI_Atoms[i++] = Yap_LookupAtom("xf");
  SWI_Atoms[i++] = Yap_LookupAtom("xfx");
  SWI_Atoms[i++] = Yap_LookupAtom("xfy");
  SWI_Atoms[i++] = Yap_LookupAtom("xml");
  SWI_Atoms[i++] = Yap_LookupAtom("xor");
  SWI_Atoms[i++] = Yap_LookupAtom("@");
  SWI_Atoms[i++] = Yap_LookupAtom("yf");
  SWI_Atoms[i++] = Yap_LookupAtom("yfx");
  SWI_Atoms[i++] = Yap_LookupAtom("yfy");
  SWI_Atoms[i++] = Yap_LookupAtom("zero_divisor");
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_abs),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_access),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_acos),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_alias),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_and),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ar_equals),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ar_not_equal),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_asin),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_assert),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_asserta),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_atan),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_atan),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_atom),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_att),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_backslash),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_bar),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_bitor),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_bom),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_brace_term_position),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_break),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_break),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_break),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_buffer),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_buffer_size),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_busy),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_bw_xor),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_call),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_callpred),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_catch),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ceil),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ceiling),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_chars),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_chars),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_clause),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_close_on_abort),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_codes),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_codes),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_colon),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_comma),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_context),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_cos),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_cputime),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_curl),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_cut_call),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_cut_exit),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dand),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_date),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_date),9);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dc_call_prolog),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dcall),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dcut),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dde_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_debugging),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_detached),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dexit),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dforeign_registered),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dgarbage_collect),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_div),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_divide),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dmessage_queue),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dmutex),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_domain_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dot),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_doublestar),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dprof_node),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_drecover_and_rethrow),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dstream),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dthread_init),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dthrow),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dtime),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dvard),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_dwakeup),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_e),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_encoding),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_end_of_stream),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_eof_action),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_epsilon),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_equals),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_erased),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_eval),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_evaluation_error),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_exception),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_exception),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_existence_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_exited),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_exp),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_exports),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_external_exception),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_fail),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_failure_error),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_file),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_file),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_file_name),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_file_no),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_float),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_float_fractional_part),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_float_integer_part),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_floor),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_foreign_function),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_frame),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_frame_finished),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_gcd),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_goal_expansion),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ground),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_hat),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_ifthen),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_input),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_integer),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_interrupt),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_io_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_is),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_isovar),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_larger),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_larger_equal),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_line_count),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_list_position),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_listing),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_locked),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_log),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_log10),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_lsb),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_lshift),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_max),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_max_size),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_message_lines),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_min),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_minus),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_minus),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_mod),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_mode),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_msb),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_newline),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_nlink),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_nonvar),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_not_implemented),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_not_provable),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_occurs_check),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_or),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_output),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_permission_error),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_pi),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_pipe),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_plus),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_plus),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_popcount),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_portray),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_position),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_powm),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_print),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_print_message),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_procedure),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_prove),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_prove),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_punct),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_random),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_rational),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_rationalize),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_rdiv),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_rem),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_reposition),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_representation_error),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_representation_errors),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_resource_error),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_retry),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_round),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_rshift),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_semicolon),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_setup_call_catcher_cleanup),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_shared_object),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_shell),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_sign),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_signal),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_signal),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_sin),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_singletons),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_size),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_smaller),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_smaller_equal),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_softcut),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_spy),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_sqrt),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_star),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_status),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_stream),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_stream_position),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_strict_equal),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_string),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_string),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_string_position),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_syntax_error),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_syntax_error),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_tan),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_term_expansion),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_term_position),5);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_timeout),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_timeout_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_trace),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_traceinterc),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_tracing),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_true),0);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_truncate),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_tty),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_type),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_type_error),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_undefinterc),4);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_unify_determined),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_var),1);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_wakeup),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_warning),3);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_xor),2);
  SWI_Functors[j++] = Yap_MkFunctor(SWIAtomToAtom(ATOM_xpceref),1);
